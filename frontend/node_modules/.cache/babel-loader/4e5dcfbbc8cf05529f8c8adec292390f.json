{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bebe/Downloads/strapi/frontend/src/components/Planets.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, useMutation, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/api\",\n  cache: new InMemoryCache()\n});\nconst GET_PLANETS = gql`\nquery GETPLANETS {\n  planets {\n    id\n    code\n    name\n  }\n}\n`;\nconst GET_SPACE_CENTER_BY_PLANET = gql`\n  query SPACECENTERSBYPLANET{\n    spacecenterbyplanet (idplanet:1){ \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\nconst GET_ALL_SPACE_CENTER = gql`\n  query SPACECENTERS{\n    spacecenters { \n        id\n        name\n        idplanet\n        planet{\n            name\n          }\n      }\n  }\n`;\n\nfunction Planets({\n  onPlanetSelected\n}) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PLANETS);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"planet\",\n    onChange: onPlanetSelected,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"Tous\",\n      children: \"Tous\"\n    }, \"default\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), data.planets.map(planets => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: planets.name,\n      children: planets.name\n    }, planets.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Planets, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\n\nfunction GetSpaceCenter({\n  id\n}) {\n  _s2();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"spacecenter\",\n    children: data.spacecenter.map(spacecenter => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: spacecenter.name,\n      children: spacecenter.code\n    }, spacecenter.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(GetSpaceCenter, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = GetSpaceCenter;\n\nfunction GetAllSpaceCenters() {\n  _s3();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ALL_SPACE_CENTER);\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"slider\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: data.spacecenters.map(spacecenter => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardFlight\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: spacecenter.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: spacecenter.planet.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: spacecenter.flight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allFlightButton\",\n          onClick: \"\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"SEE ALL FLIGHTS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)]\n      }, \"spacecenter.id\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s3(GetAllSpaceCenters, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c3 = GetAllSpaceCenters;\n\nclass PlanetsAndSpace extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n        client: client,\n        children: /*#__PURE__*/_jsxDEV(GetAllSpaceCenters, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PlanetsAndSpace;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Planets\");\n$RefreshReg$(_c2, \"GetSpaceCenter\");\n$RefreshReg$(_c3, \"GetAllSpaceCenters\");","map":{"version":3,"sources":["/Users/bebe/Downloads/strapi/frontend/src/components/Planets.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","useQuery","useMutation","gql","client","uri","cache","GET_PLANETS","GET_SPACE_CENTER_BY_PLANET","GET_ALL_SPACE_CENTER","Planets","onPlanetSelected","loading","error","data","message","planets","map","name","id","GetSpaceCenter","variables","spacecenter","code","GetAllSpaceCenters","spacecenters","planet","flight","PlanetsAndSpace","Component","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  useMutation,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/api\",\n  cache: new InMemoryCache()\n});\n\nconst GET_PLANETS = gql`\nquery GETPLANETS {\n  planets {\n    id\n    code\n    name\n  }\n}\n`;\n\nconst GET_SPACE_CENTER_BY_PLANET = gql`\n  query SPACECENTERSBYPLANET{\n    spacecenterbyplanet (idplanet:1){ \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\n\nconst GET_ALL_SPACE_CENTER = gql`\n  query SPACECENTERS{\n    spacecenters { \n        id\n        name\n        idplanet\n        planet{\n            name\n          }\n      }\n  }\n`;\n\n\n  function Planets ({ onPlanetSelected }) {\n    const { loading, error, data } = useQuery(GET_PLANETS);\n  \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n  \n    return (\n      <select name=\"planet\" onChange={onPlanetSelected}>\n            <option key=\"default\" value=\"Tous\">Tous</option>\n            {data.planets.map(planets => (\n            <option key={planets.id} value={planets.name}>\n              {planets.name}\n            </option>\n        ))}\n      </select>\n    );\n  }\n\n\nfunction GetSpaceCenter({id}) {\n  const { loading, error, data } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: { id },\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  return (\n      \n    <select name=\"spacecenter\">\n        {data.spacecenter.map(spacecenter => (\n          <option key={spacecenter.id} value={spacecenter.name}>\n            {spacecenter.code}\n          </option>\n        ))}\n      </select>\n  );\n}\n\n\nfunction GetAllSpaceCenters() {\n    const { loading, error, data } = useQuery(GET_ALL_SPACE_CENTER);\n \n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n  \n    return (\n        <div id=\"slider\">\n            <div className=\"card\">\n                {data.spacecenters.map(spacecenter => (\n                    <div className=\"cardFlight\" key=\"spacecenter.id\">\n                <h2>{spacecenter.name}</h2>\n                <h3>{spacecenter.planet.name}</h3>\n                <p>{spacecenter.flight}</p>\n                <div className=\"allFlightButton\" onClick=\"\"> \n                    <h3>SEE ALL FLIGHTS</h3>\n                </div>\n                </div>\n                ))} \n            </div>\n        </div>\n    );\n  }\n\n\nclass PlanetsAndSpace extends React.Component{\n    render(){\n      return(\n      <div>\n        <ApolloProvider client={client}>\n            <GetAllSpaceCenters />\n        </ApolloProvider>\n      </div>\n      )\n    }\n  }\n\n  export default PlanetsAndSpace;\n"]},"metadata":{},"sourceType":"module"}