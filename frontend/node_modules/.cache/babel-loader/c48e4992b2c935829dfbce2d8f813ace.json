{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bebe/Downloads/strapi/frontend/src/components/Planets.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, useMutation, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/api\",\n  cache: new InMemoryCache()\n});\nconst GET_PLANETS = gql`\nquery GETPLANETS {\n  planets {\n    id\n    code\n    name\n  }\n}\n`;\nconst GET_SPACE_CENTER_BY_PLANET = gql`\n  query SPACECENTERSBYPLANET{\n    spacecenterbyplanet (idplanet:1){ \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\nconst GET_ALL_SPACE_CENTER = gql`\n  query SPACECENTERS{\n    spacecenters { \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\n\nfunction Planets({\n  onPlanetSelected\n}) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PLANETS);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"planet\",\n    onChange: onPlanetSelected,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"Tous\",\n      children: \"Tous\"\n    }, \"default\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), data.planets.map(planets => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: planets.name,\n      children: planets.name\n    }, planets.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Planets, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\n\nfunction GetSpaceCenter({\n  id\n}) {\n  _s2();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"spacecenter\",\n    children: data.spacecenter.map(spacecenter => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: spacecenter.name,\n      children: spacecenter.code\n    }, spacecenter.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(GetSpaceCenter, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = GetSpaceCenter;\n\nfunction GetAllSpaceCenter({\n  id\n}) {\n  _s3();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"spacecenter\",\n    children: data.spacecenter.map(spacecenter => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: spacecenter.name,\n      children: spacecenter.code\n    }, spacecenter.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }, this);\n}\n\n_s3(GetAllSpaceCenter, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c3 = GetAllSpaceCenter;\n\n/*#__PURE__*/\n_jsxDEV(\"div\", {\n  id: \"slider\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: data.flights.map(flights => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardFlight\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Num\\xE9ro de vol : \", flights.code]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"D\\xE9part : \", flights.departure_at]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Nombre de places : \", flights.seat_count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"D\\xE9part de : \", flights.launching_site]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Arriv\\xE9e \\xE0 : \", flights.landing_site]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 1\n      }, this)]\n    }, \"flights.code\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 1\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 107,\n  columnNumber: 1\n}, this);\n\nclass PlanetsAndSpace extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n        client: client,\n        children: [/*#__PURE__*/_jsxDEV(Planets, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GetSpaceCenter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PlanetsAndSpace;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Planets\");\n$RefreshReg$(_c2, \"GetSpaceCenter\");\n$RefreshReg$(_c3, \"GetAllSpaceCenter\");","map":{"version":3,"sources":["/Users/bebe/Downloads/strapi/frontend/src/components/Planets.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","useQuery","useMutation","gql","client","uri","cache","GET_PLANETS","GET_SPACE_CENTER_BY_PLANET","GET_ALL_SPACE_CENTER","Planets","onPlanetSelected","loading","error","data","message","planets","map","name","id","GetSpaceCenter","variables","spacecenter","code","GetAllSpaceCenter","flights","departure_at","seat_count","launching_site","landing_site","PlanetsAndSpace","Component","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  useMutation,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/api\",\n  cache: new InMemoryCache()\n});\n\nconst GET_PLANETS = gql`\nquery GETPLANETS {\n  planets {\n    id\n    code\n    name\n  }\n}\n`;\n\nconst GET_SPACE_CENTER_BY_PLANET = gql`\n  query SPACECENTERSBYPLANET{\n    spacecenterbyplanet (idplanet:1){ \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\n\nconst GET_ALL_SPACE_CENTER = gql`\n  query SPACECENTERS{\n    spacecenters { \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\n\n\n \n  function Planets ({ onPlanetSelected }) {\n    const { loading, error, data } = useQuery(GET_PLANETS);\n  \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n  \n    return (\n      <select name=\"planet\" onChange={onPlanetSelected}>\n            <option key=\"default\" value=\"Tous\">Tous</option>\n            {data.planets.map(planets => (\n            <option key={planets.id} value={planets.name}>\n              {planets.name}\n            </option>\n        ))}\n      </select>\n    );\n  }\n\n\nfunction GetSpaceCenter({id}) {\n  const { loading, error, data } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: { id },\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  return (\n    <select name=\"spacecenter\">\n        {data.spacecenter.map(spacecenter => (\n          <option key={spacecenter.id} value={spacecenter.name}>\n            {spacecenter.code}\n          </option>\n        ))}\n      </select>\n  );\n}\n\n\nfunction GetAllSpaceCenter({id}) {\n    const { loading, error, data } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n      variables: { id },\n    });\n  \n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n  \n    return (\n      <select name=\"spacecenter\">\n          {data.spacecenter.map(spacecenter => (\n            <option key={spacecenter.id} value={spacecenter.name}>\n              {spacecenter.code}\n            </option>\n          ))}\n        </select>\n    );\n  }\n<div id=\"slider\">\n<div className=\"card\">\n{data.flights.map(flights => (\n    <div className=\"cardFlight\" key=\"flights.code\">\n<p>Numéro de vol : {flights.code}</p>\n<p>Départ : {flights.departure_at}</p>\n<p>Nombre de places : {flights.seat_count}</p>\n<p>Départ de : {flights.launching_site}</p>\n<p>Arrivée à : {flights.landing_site}</p>\n</div>\n))} \n</div>\n</div>\nclass PlanetsAndSpace extends React.Component{\n    render(){\n      return(\n      <div>\n        <ApolloProvider client={client}>\n            <Planets />\n            <GetSpaceCenter />\n        </ApolloProvider>\n      </div>\n      )\n    }\n  }\n\n  export default PlanetsAndSpace;\n"]},"metadata":{},"sourceType":"module"}