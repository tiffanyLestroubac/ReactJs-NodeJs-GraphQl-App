{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bebe/Downloads/strapi/frontend/src/components/Planets.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, useMutation, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/api\",\n  cache: new InMemoryCache()\n});\nconst GET_PLANETS = gql`\nquery GETPLANETS {\n  planets {\n    id\n    code\n    name\n  }\n}\n`;\nconst GET_SPACE_CENTER_BY_PLANET = gql`\n  query SPACECENTERSBYPLANET{\n    spacecenterbyplanet (idplanet:1){ \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\n\nfunction Planets({\n  onPlanetSelected\n}) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PLANETS);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"planet\",\n    onChange: onPlanetSelected,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"Tous\"\n    }, \"default\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), data.planets.map(planets => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: planets.name,\n      children: planets.code\n    }, planets.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Planets, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\n\nfunction GetSpaceCenter({\n  id\n}) {\n  _s2();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"spacecenter\",\n    children: data.spacecenter.map(spacecenter => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: spacecenter.name,\n      children: spacecenter.code\n    }, spacecenter.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(GetSpaceCenter, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = GetSpaceCenter;\n\nclass PlanetsAndSpace extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n        client: client,\n        children: [/*#__PURE__*/_jsxDEV(Planets, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GetSpaceCenter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PlanetsAndSpace;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Planets\");\n$RefreshReg$(_c2, \"GetSpaceCenter\");","map":{"version":3,"sources":["/Users/bebe/Downloads/strapi/frontend/src/components/Planets.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","useQuery","useMutation","gql","client","uri","cache","GET_PLANETS","GET_SPACE_CENTER_BY_PLANET","Planets","onPlanetSelected","loading","error","data","message","planets","map","name","code","id","GetSpaceCenter","variables","spacecenter","PlanetsAndSpace","Component","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,WALF,EAMEC,GANF,QAOO,gBAPP;AASA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAE,2BADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMQ,WAAW,GAAGJ,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMK,0BAA0B,GAAGL,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWE,SAASM,OAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AAAA;;AACtC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACM,WAAD,CAAzC;AAEA,MAAII,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,sBACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEJ,gBAAhC;AAAA,4BACM;AAAsB,MAAA,KAAK,EAAC;AAA5B,OAAY,SAAZ;AAAA;AAAA;AAAA;AAAA,YADN,EAEOG,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiBD,OAAO,iBACzB;AAAyB,MAAA,KAAK,EAAEA,OAAO,CAACE,IAAxC;AAAA,gBACGF,OAAO,CAACG;AADX,OAAaH,OAAO,CAACI,EAArB;AAAA;AAAA;AAAA;AAAA,YADC,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAhBQV,O;UAC0BR,Q;;;KAD1BQ,O;;AAoBX,SAASW,cAAT,CAAwB;AAACD,EAAAA;AAAD,CAAxB,EAA8B;AAAA;;AAC5B,QAAM;AAAER,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACO,0BAAD,EAA6B;AACpEa,IAAAA,SAAS,EAAE;AAAEF,MAAAA;AAAF;AADyD,GAA7B,CAAzC;AAIA,MAAIR,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAM,EAAvB;AAEX,sBACE;AAAQ,IAAA,IAAI,EAAC,aAAb;AAAA,cACKC,IAAI,CAACS,WAAL,CAAiBN,GAAjB,CAAqBM,WAAW,iBAC/B;AAA6B,MAAA,KAAK,EAAEA,WAAW,CAACL,IAAhD;AAAA,gBACGK,WAAW,CAACJ;AADf,OAAaI,WAAW,CAACH,EAAzB;AAAA;AAAA;AAAA;AAAA,YADD;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;IAjBQC,c;UAC0BnB,Q;;;MAD1BmB,c;;AAmBT,MAAMG,eAAN,SAA8B1B,KAAK,CAAC2B,SAApC,CAA6C;AACzCC,EAAAA,MAAM,GAAE;AACN,wBACA;AAAA,6BACE,QAAC,cAAD;AAAgB,QAAA,MAAM,EAAErB,MAAxB;AAAA,gCACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADA;AAQD;;AAVwC;;AAa3C,eAAemB,eAAf","sourcesContent":["import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  useMutation,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/api\",\n  cache: new InMemoryCache()\n});\n\nconst GET_PLANETS = gql`\nquery GETPLANETS {\n  planets {\n    id\n    code\n    name\n  }\n}\n`;\n\nconst GET_SPACE_CENTER_BY_PLANET = gql`\n  query SPACECENTERSBYPLANET{\n    spacecenterbyplanet (idplanet:1){ \n        id\n        name\n        idplanet\n        code\n      }\n  }\n`;\n \n  function Planets ({ onPlanetSelected }) {\n    const { loading, error, data } = useQuery(GET_PLANETS);\n  \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n  \n    return (\n      <select name=\"planet\" onChange={onPlanetSelected}>\n            <option key=\"default\" value=\"Tous\"></option>\n            {data.planets.map(planets => (\n            <option key={planets.id} value={planets.name}>\n              {planets.code}\n            </option>\n        ))}\n      </select>\n    );\n  }\n\n  \n\nfunction GetSpaceCenter({id}) {\n  const { loading, error, data } = useQuery(GET_SPACE_CENTER_BY_PLANET, {\n    variables: { id },\n  });\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  return (\n    <select name=\"spacecenter\">\n        {data.spacecenter.map(spacecenter => (\n          <option key={spacecenter.id} value={spacecenter.name}>\n            {spacecenter.code}\n          </option>\n        ))}\n      </select>\n  );\n}\n\nclass PlanetsAndSpace extends React.Component{\n    render(){\n      return(\n      <div>\n        <ApolloProvider client={client}>\n            <Planets />\n            <GetSpaceCenter />\n        </ApolloProvider>\n      </div>\n      )\n    }\n  }\n\n  export default PlanetsAndSpace;\n"]},"metadata":{},"sourceType":"module"}