{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bebe/Downloads/strapi/frontend/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, gql } from '@apollo/client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport './styles/style.scss';\nimport 'bootstrap-4-grid/css/grid.min.css';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from '@apollo/client/link/context';\nimport App from './App'; //const link = new HttpLink({ uri: 'http://localhost:4001/api' })\n\nconst link = new HttpLink({\n  uri: 'http://localhost:4001/api'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link: authLink.concat(link),\n  cache\n});\nexport default client;\nclient.query({\n  query: gql`\n      query planets {\n          id\n          name\n      }\n    `\n}).then(result => console.log(result));\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/bebe/Downloads/strapi/frontend/src/index.js"],"names":["React","useState","ReactDOM","ApolloClient","gql","InMemoryCache","HttpLink","setContext","App","link","uri","authLink","_","headers","token","localStorage","getItem","authorization","cache","client","concat","query","then","result","console","log","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACIC,YADJ,EAEIC,GAFJ,QAGS,gBAHT;AAIA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAO,qBAAP;AACA,OAAO,mCAAP;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,IAAIH,QAAJ,CAAa;AACxBI,EAAAA,GAAG,EAAE;AADmB,CAAb,CAAb;AAGA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAV0B,CAA3B;AAWA,MAAMI,KAAK,GAAG,IAAIb,aAAJ,EAAd;AACA,MAAMc,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BM,EAAAA,IAAI,EAACE,QAAQ,CAACS,MAAT,CAAgBX,IAAhB,CADyB;AAE9BS,EAAAA;AAF8B,CAAjB,CAAf;AAIA,eAAeC,MAAf;AAEEA,MAAM,CACLE,KADD,CACO;AACLA,EAAAA,KAAK,EAAEjB,GAAI;AACf;AACA;AACA;AACA;AACA;AANS,CADP,EASCkB,IATD,CASMC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAThB;AAWFrB,QAAQ,CAACwB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState }  from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n    ApolloClient,\n    gql\n  } from '@apollo/client';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport './styles/style.scss';\nimport 'bootstrap-4-grid/css/grid.min.css';\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from '@apollo/client/link/context';\nimport App from './App';\n\n//const link = new HttpLink({ uri: 'http://localhost:4001/api' })\n\nconst link = new HttpLink({\n  uri: 'http://localhost:4001/api'\n});\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\nconst cache = new InMemoryCache()\nconst client = new ApolloClient({\n  link:authLink.concat(link),\n  cache\n})\nexport default client\n\n  client\n  .query({\n    query: gql`\n      query planets {\n          id\n          name\n      }\n    `\n  })\n  .then(result => console.log(result));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}