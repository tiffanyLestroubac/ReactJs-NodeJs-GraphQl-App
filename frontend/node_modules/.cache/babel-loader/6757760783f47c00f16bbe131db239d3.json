{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bebe/Downloads/strapi/frontend/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, gql, useQuery } from '@apollo/client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport './styles/style.scss';\nimport 'bootstrap-4-grid/css/grid.min.css';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from '@apollo/client/link/context';\nimport App from './App'; //const link = new HttpLink({ uri: 'http://localhost:4001/api' })\n\nconst link = new HttpLink({\n  uri: 'http://localhost:4001/api'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link: authLink.concat(link),\n  cache\n});\nexport default client;\nclient.query({\n  query: gql`\n    query GETPLANETS {\n      planets {\n        id\n        code\n        name\n      }\n    }\n    `\n}).then(result => console.log(result));\n\nfunction Planets({\n  onPlanetSelected\n}) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PLANETS);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"planet\",\n    onChange: onPlanetSelected,\n    children: data.planets.map(planets => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: planets.name,\n      children: planets.code\n    }, planets.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Planets, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["/Users/bebe/Downloads/strapi/frontend/src/index.js"],"names":["React","useState","ReactDOM","ApolloClient","gql","useQuery","InMemoryCache","HttpLink","setContext","App","link","uri","authLink","_","headers","token","localStorage","getItem","authorization","cache","client","concat","query","then","result","console","log","Planets","onPlanetSelected","loading","error","data","GET_PLANETS","message","planets","map","name","code","id","render","document","getElementById"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACIC,YADJ,EAEIC,GAFJ,EAGIC,QAHJ,QAIS,gBAJT;AAKA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAO,qBAAP;AACA,OAAO,mCAAP;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,IAAIH,QAAJ,CAAa;AACxBI,EAAAA,GAAG,EAAE;AADmB,CAAb,CAAb;AAGA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAV0B,CAA3B;AAWA,MAAMI,KAAK,GAAG,IAAIb,aAAJ,EAAd;AACA,MAAMc,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BO,EAAAA,IAAI,EAACE,QAAQ,CAACS,MAAT,CAAgBX,IAAhB,CADyB;AAE9BS,EAAAA;AAF8B,CAAjB,CAAf;AAIA,eAAeC,MAAf;AAEEA,MAAM,CACLE,KADD,CACO;AACLA,EAAAA,KAAK,EAAElB,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATS,CADP,EAYCmB,IAZD,CAYMC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAZhB;;AAcA,SAASG,OAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AAAA;;AACtC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2B1B,QAAQ,CAAC2B,WAAD,CAAzC;AAEA,MAAIH,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACG,OAAQ,EAA/B;AAEX,sBACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEL,gBAAhC;AAAA,cACGG,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBD,OAAO,iBACvB;AAAyB,MAAA,KAAK,EAAEA,OAAO,CAACE,IAAxC;AAAA,gBACGF,OAAO,CAACG;AADX,OAAaH,OAAO,CAACI,EAArB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAfQX,O;UAC0BtB,Q;;;KAD1BsB,O;AAiBXzB,QAAQ,CAACqC,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState }  from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n    ApolloClient,\n    gql,\n    useQuery\n  } from '@apollo/client';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport './styles/style.scss';\nimport 'bootstrap-4-grid/css/grid.min.css';\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from '@apollo/client/link/context';\nimport App from './App';\n\n//const link = new HttpLink({ uri: 'http://localhost:4001/api' })\n\nconst link = new HttpLink({\n  uri: 'http://localhost:4001/api'\n});\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\nconst cache = new InMemoryCache()\nconst client = new ApolloClient({\n  link:authLink.concat(link),\n  cache\n})\nexport default client\n\n  client\n  .query({\n    query: gql`\n    query GETPLANETS {\n      planets {\n        id\n        code\n        name\n      }\n    }\n    `\n  })\n  .then(result => console.log(result));\n\n  function Planets ({ onPlanetSelected }) {\n    const { loading, error, data } = useQuery(GET_PLANETS);\n  \n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error.message}`;\n  \n    return (\n      <select name=\"planet\" onChange={onPlanetSelected}>\n        {data.planets.map(planets => (\n          <option key={planets.id} value={planets.name}>\n            {planets.code}\n          </option>\n        ))}\n      </select>\n    );\n  }\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}