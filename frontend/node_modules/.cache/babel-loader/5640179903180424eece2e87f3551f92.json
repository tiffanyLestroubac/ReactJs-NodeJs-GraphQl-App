{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuel/Downloads/strapi/src/components/ToDo.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, useMutation, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"https://sxewr.sse.codesandbox.io/\",\n  cache: new InMemoryCache()\n});\nconst GET_TODOS = gql`\n  {\n    todos {\n      id\n      type\n    }\n  }\n`;\nconst UPDATE_TODO = gql`\n  mutation UpdateTodo($id: String!, $type: String!) {\n    updateTodo(id: $id, type: $type) {\n      id\n      type\n    }\n  }\n`;\n\nfunction Todos() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TODOS);\n  const [updateTodo, {\n    loading: mutationLoading,\n    error: mutationError\n  }] = useMutation(UPDATE_TODO);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 21\n  }, this);\n  return data.todos.map(({\n    id,\n    type\n  }) => {\n    let input;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          updateTodo({\n            variables: {\n              id,\n              type: input.value\n            }\n          });\n          input.value = \"\";\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: node => {\n            input = node;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), mutationLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }, this), mutationError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error :( Please try again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 27\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  });\n}\n\n_s(Todos, \"U0tetn/JeLrL9nmcK33b5ssFdos=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = Todos;\nconst ADD_TODO = gql`\n  mutation AddTodo($type: String!) {\n    addTodo(type: $type) {\n      id\n      type\n    }\n  }\n`;\n\nfunction AddTodo() {\n  _s2();\n\n  let input;\n  const [addTodo] = useMutation(ADD_TODO, {\n    update(cache, {\n      data: {\n        addTodo\n      }\n    }) {\n      cache.modify({\n        fields: {\n          todos(existingTodos = []) {\n            const newTodoRef = cache.writeFragment({\n              data: addTodo,\n              fragment: gql`\n                fragment NewTodo on Todo {\n                  id\n                  type\n                }\n              `\n            });\n            return existingTodos.concat(newTodoRef);\n          }\n\n        }\n      });\n    }\n\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        addTodo({\n          variables: {\n            type: input.value\n          }\n        });\n        input.value = \"\";\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: node => {\n          input = node;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AddTodo, \"YkAyGXetDJOO19DxU8fZe8pVmwM=\", false, function () {\n  return [useMutation];\n});\n\n_c2 = AddTodo;\n\nclass ToDo extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n        client: client,\n        children: [/*#__PURE__*/_jsxDEV(AddTodo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Todos, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Currency;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Todos\");\n$RefreshReg$(_c2, \"AddTodo\");","map":{"version":3,"sources":["/Users/samuel/Downloads/strapi/src/components/ToDo.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","useQuery","useMutation","gql","client","uri","cache","GET_TODOS","UPDATE_TODO","Todos","loading","error","data","updateTodo","mutationLoading","mutationError","todos","map","id","type","input","e","preventDefault","variables","value","node","ADD_TODO","AddTodo","addTodo","update","modify","fields","existingTodos","newTodoRef","writeFragment","fragment","concat","ToDo","Component","render","Currency"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,WALF,EAMEC,GANF,QAOO,gBAPP;AASA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAE,mCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMQ,SAAS,GAAGJ,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMK,WAAW,GAAGL,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,SAASM,KAAT,GAAiB;AAAA;;AACf,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CAACM,SAAD,CAAzC;AACA,QAAM,CACJM,UADI,EAEJ;AAAEH,IAAAA,OAAO,EAAEI,eAAX;AAA4BH,IAAAA,KAAK,EAAEI;AAAnC,GAFI,IAGFb,WAAW,CAACM,WAAD,CAHf;AAKA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOC,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,KAAkB;AACtC,QAAIC,KAAJ;AAEA,wBACE;AAAA,8BACE;AAAA,kBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,QAAQ,EAAEE,CAAC,IAAI;AACbA,UAAAA,CAAC,CAACC,cAAF;AACAT,UAAAA,UAAU,CAAC;AAAEU,YAAAA,SAAS,EAAE;AAAEL,cAAAA,EAAF;AAAMC,cAAAA,IAAI,EAAEC,KAAK,CAACI;AAAlB;AAAb,WAAD,CAAV;AAEAJ,UAAAA,KAAK,CAACI,KAAN,GAAc,EAAd;AACD,SANH;AAAA,gCAQE;AACE,UAAA,GAAG,EAAEC,IAAI,IAAI;AACXL,YAAAA,KAAK,GAAGK,IAAR;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,gBARF,eAaE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAiBGX,eAAe,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBtB,EAkBGC,aAAa,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBpB;AAAA,OAAUG,EAAV;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD,GAzBM,CAAP;AA0BD;;GApCQT,K;UAC0BR,Q,EAI7BC,W;;;KALGO,K;AAsCT,MAAMiB,QAAQ,GAAGvB,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,SAASwB,OAAT,GAAmB;AAAA;;AACjB,MAAIP,KAAJ;AACA,QAAM,CAACQ,OAAD,IAAY1B,WAAW,CAACwB,QAAD,EAAW;AACtCG,IAAAA,MAAM,CACJvB,KADI,EAEJ;AACEM,MAAAA,IAAI,EAAE;AAAEgB,QAAAA;AAAF;AADR,KAFI,EAKJ;AACAtB,MAAAA,KAAK,CAACwB,MAAN,CAAa;AACXC,QAAAA,MAAM,EAAE;AACNf,UAAAA,KAAK,CAACgB,aAAa,GAAG,EAAjB,EAAqB;AACxB,kBAAMC,UAAU,GAAG3B,KAAK,CAAC4B,aAAN,CAAoB;AACrCtB,cAAAA,IAAI,EAAEgB,OAD+B;AAErCO,cAAAA,QAAQ,EAAEhC,GAAI;AAC5B;AACA;AACA;AACA;AACA;AAPmD,aAApB,CAAnB;AASA,mBAAO6B,aAAa,CAACI,MAAd,CAAqBH,UAArB,CAAP;AACD;;AAZK;AADG,OAAb;AAgBD;;AAvBqC,GAAX,CAA7B;AA0BA,sBACE;AAAA,2BACE;AACE,MAAA,QAAQ,EAAEZ,CAAC,IAAI;AACbA,QAAAA,CAAC,CAACC,cAAF;AACAM,QAAAA,OAAO,CAAC;AAAEL,UAAAA,SAAS,EAAE;AAAEJ,YAAAA,IAAI,EAAEC,KAAK,CAACI;AAAd;AAAb,SAAD,CAAP;AACAJ,QAAAA,KAAK,CAACI,KAAN,GAAc,EAAd;AACD,OALH;AAAA,8BAOE;AACE,QAAA,GAAG,EAAEC,IAAI,IAAI;AACXL,UAAAA,KAAK,GAAGK,IAAR;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;IA9CQE,O;UAEWzB,W;;;MAFXyB,O;;AAiDT,MAAMU,IAAN,SAAmBxC,KAAK,CAACyC,SAAzB,CAAkC;AAC9BC,EAAAA,MAAM,GAAE;AACN,wBACA;AAAA,6BACE,QAAC,cAAD;AAAgB,QAAA,MAAM,EAAEnC,MAAxB;AAAA,gCACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADA;AAQD;;AAV6B;;AAahC,eAAeoC,QAAf","sourcesContent":["import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  useMutation,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://sxewr.sse.codesandbox.io/\",\n  cache: new InMemoryCache()\n});\n\nconst GET_TODOS = gql`\n  {\n    todos {\n      id\n      type\n    }\n  }\n`;\n\nconst UPDATE_TODO = gql`\n  mutation UpdateTodo($id: String!, $type: String!) {\n    updateTodo(id: $id, type: $type) {\n      id\n      type\n    }\n  }\n`;\n\nfunction Todos() {\n  const { loading, error, data } = useQuery(GET_TODOS);\n  const [\n    updateTodo,\n    { loading: mutationLoading, error: mutationError }\n  ] = useMutation(UPDATE_TODO);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.todos.map(({ id, type }) => {\n    let input;\n\n    return (\n      <div key={id}>\n        <p>{type}</p>\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            updateTodo({ variables: { id, type: input.value } });\n\n            input.value = \"\";\n          }}\n        >\n          <input\n            ref={node => {\n              input = node;\n            }}\n          />\n          <button type=\"submit\">Update Todo</button>\n        </form>\n        {mutationLoading && <p>Loading...</p>}\n        {mutationError && <p>Error :( Please try again</p>}\n      </div>\n    );\n  });\n}\n\nconst ADD_TODO = gql`\n  mutation AddTodo($type: String!) {\n    addTodo(type: $type) {\n      id\n      type\n    }\n  }\n`;\n\nfunction AddTodo() {\n  let input;\n  const [addTodo] = useMutation(ADD_TODO, {\n    update(\n      cache,\n      {\n        data: { addTodo }\n      }\n    ) {\n      cache.modify({\n        fields: {\n          todos(existingTodos = []) {\n            const newTodoRef = cache.writeFragment({\n              data: addTodo,\n              fragment: gql`\n                fragment NewTodo on Todo {\n                  id\n                  type\n                }\n              `\n            });\n            return existingTodos.concat(newTodoRef);\n          }\n        }\n      });\n    }\n  });\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addTodo({ variables: { type: input.value } });\n          input.value = \"\";\n        }}\n      >\n        <input\n          ref={node => {\n            input = node;\n          }}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  );\n}\n\n\nclass ToDo extends React.Component{\n    render(){\n      return(\n      <div>\n        <ApolloProvider client={client}>\n            <AddTodo />\n            <Todos />\n        </ApolloProvider>\n      </div>\n      )\n    }\n  }\n\n  export default Currency;\n\n"]},"metadata":{},"sourceType":"module"}